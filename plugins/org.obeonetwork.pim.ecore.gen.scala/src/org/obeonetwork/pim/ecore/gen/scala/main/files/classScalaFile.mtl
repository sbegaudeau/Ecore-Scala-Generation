[comment encoding = UTF-8 /]
[module classScalaFile('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')]

[import org::obeonetwork::pim::ecore::gen::scala::common::documentation /]
[import org::obeonetwork::pim::ecore::gen::scala::common::fileCommon /]
[import org::obeonetwork::pim::ecore::gen::scala::common::imports /]
[import org::obeonetwork::pim::ecore::gen::scala::common::name /]
[import org::obeonetwork::pim::ecore::gen::scala::common::type /]

[template private classScalaFilePath(aGenClass : GenClass) post(trim())]
[aGenClass.genPackagePath()/]/[if(aGenClass.genPackage.classPackageSuffix.size() > 0)][aGenClass.genPackage.classPackageSuffix/]/[/if][aGenClass.genImplementationTypeName()/].scala
[/template]

[template public genClassScalaFile(aGenClass : GenClass)]
[file (aGenClass.classScalaFilePath(), false, 'UTF-8')]
[aGenClass.genScaladocHeader()/]
package [aGenClass.genPackage()/];

[aGenClass.genImports()/]

[aGenClass.genImplementationScalaDoc()/]
[aGenClass.abstract()/]class [aGenClass.genImplementationTypeName()/][aGenClass.classSignature()/] {
	[aGenClass.classBody()/]
}
[/file]
[/template]

[template private classBody(aGenClass : GenClass) post(trim())]
[aGenClass.fields()/]
[aGenClass.constructors()/]
[aGenClass.methods()/]
[aGenClass.accessors()/]
[/template]

[template private abstract(aGenClass : GenClass)]
[if (aGenClass.ecoreClass.abstract)]abstract [/if]
[/template]

[template private classSignature(aGenClass : GenClass)]
[let signature : String = aGenClass.defaultConstructor() + aGenClass.inheritance()][if (signature.trim().size() > 0)][signature/][/if][/let]
[/template]

[template private defaultConstructor(aGenClass : GenClass)]
 
[/template]

[template private inheritance(aGenClass : GenClass) post(trim())]
[if (aGenClass.ecoreClass.eSuperTypes->size() > 0)]
[if (aGenClass.classSuperTypes()->size() > 0)]
extends [aGenClass.classSuperTypes()->first().genTypeName()/][for (aTrait : EClass | aGenClass.traitSuperTypes())] with [aTrait.genTypeName()/][/for]
[elseif(aGenClass.traitSuperTypes()->size() > 0)]
extends [aGenClass.traitSuperTypes()->first().genTypeName()/][for (aTrait : EClass | aGenClass.traitSuperTypes()->excluding(aGenClass.traitSuperTypes()->first()))] with [aTrait.genTypeName()/][/for]
[/if]
[/if]
[/template]

[query private classSuperTypes(aGenClass : GenClass) : OrderedSet(EClass) =
	aGenClass.ecoreClass.eSuperTypes->reject(anEClass : EClass | anEClass.interface)
/]

[query private traitSuperTypes(aGenClass : GenClass) : OrderedSet(EClass) =
	aGenClass.ecoreClass.eSuperTypes->select(anEClass : EClass | anEClass.interface)
/]

[template private fields(aGenClass : GenClass)]
[for (anEAttribute : EAttribute | aGenClass.ecoreClass.eAttributes->reject(anEAttr: EAttribute | anEAttr.volatile))]
[anEAttribute.genImplementationScalaDoc()/]
[anEAttribute.visibility()/][anEAttribute.override()/]var [anEAttribute.genFieldName()/]: [anEAttribute.genTypeName()/] = [anEAttribute.genDefaultValue()/];

[/for]
[for (anEReference : EReference | aGenClass.ecoreClass.eReferences->reject(anERef: EReference | anERef.volatile))]
[anEReference.genImplementationScalaDoc()/]
[anEReference.visibility()/][anEReference.override()/]var [anEReference.genFieldName()/]: [anEReference.genTypeName()/] = [anEReference.genDefaultValue()/];

[/for]
[/template]

[template private visibility(anEAttribute : EAttribute)]
private['['/]this[']'/] 
[/template]

[template private visibility(anEReference : EReference)]
private['['/]this[']'/] 
[/template]

[template private override(anEStructuralFeature : EStructuralFeature)]
[if (anEStructuralFeature.superTypeStructuralFeatureOverridden()->size() > 0)]override [/if]
[/template]

[query private superTypeStructuralFeatureOverridden(anEStructuralFeature : EStructuralFeature) : Sequence(EStructuralFeature) = 
	anEStructuralFeature.eContainingClass.eSuperTypes.eStructuralFeatures->select(feat : EStructuralFeature | (feat.name = anEStructuralFeature.name) and (feat.genTypeName() = anEStructuralFeature.genTypeName()))
/]

[template private constructors(aGenClass : GenClass)]
[/template]

[template private methods(aGenClass : GenClass)]
[for (anEOperation : EOperation | aGenClass.ecoreClass.classOperations())]
[anEOperation.genImplementationScalaDoc()/]
[anEOperation.visibility()/][anEOperation.override()/][anEOperation.genOperationName()/]([anEOperation.parameters()/])[anEOperation.returnType()/] = {
	[anEOperation.defaultBody()/]
}
[/for]
[/template]

[template private visibility(anEOperation : EOperation)]
[/template]

[template private override(anEOperation : EOperation)]
[if (anEOperation.eContainingClass.eSuperTypes.eOperations->includes(anEOperation))]override [/if]
[/template]

[template private parameters(anEOperation : EOperation)]
[for (anEParameter : EParameter | anEOperation.eParameters) separator(', ')][anEParameter.genParameterName()/]: [anEParameter.genTypeName()/][/for]
[/template]

[template private returnType(anEOperation : EOperation) post(trim())]
[if (anEOperation.eType.oclIsUndefined())]
[else]
: [anEOperation.genTypeName()/]
[/if]
[/template]

[template private defaultBody(anEOperation : EOperation)]
[if (not anEOperation.eType.oclIsUndefined())]
return [anEOperation.genDefaultValue()/];
[/if]
[/template]

[query private classOperations(anEClass : EClass) : OrderedSet(EOperation) =
	anEClass.eOperations
/]

[template private accessors(aGenClass : GenClass)]
[for (anEAttribute : EAttribute | aGenClass.ecoreClass.eAttributes)]
[anEAttribute.genImplementationGetterScalaDoc()/]
def [anEAttribute.genAccessorName()/](): [anEAttribute.genTypeName()/] = {
	[if (not anEAttribute.volatile)]return this.[anEAttribute.genFieldName()/];[else]return [anEAttribute.genDefaultValue()/];[/if]
}
[if (not anEAttribute.unsettable)]

[anEAttribute.genImplementationSetterScalaDoc()/]
def [anEAttribute.genMutatorName()/]([anEAttribute.genSetterPrefix()/][anEAttribute.genFieldName()/]: [anEAttribute.genTypeName()/]) {
	[if (not anEAttribute.volatile)]this.[anEAttribute.genFieldName()/] = [anEAttribute.genSetterPrefix()/][anEAttribute.genFieldName()/];[/if]
}

[/if]
[/for]
[for (anEReference : EReference | aGenClass.ecoreClass.eReferences)]
[anEReference.genImplementationGetterScalaDoc()/]
def [anEReference.genAccessorName()/](): [anEReference.genTypeName()/] = {
	[if (not anEReference.volatile)]return this.[anEReference.genFieldName()/];[else]return [anEReference.genDefaultValue()/];[/if]
}
[if (not anEReference.unsettable)]

[anEReference.genImplementationSetterScalaDoc()/]
def [anEReference.genMutatorName()/]([anEReference.genSetterPrefix()/][anEReference.genFieldName()/]: [anEReference.genTypeName()/]) {
	[if (not anEReference.volatile)]this.[anEReference.genFieldName()/] = [anEReference.genSetterPrefix()/][anEReference.genFieldName()/];[/if]
}

[/if]
[/for]
[/template]